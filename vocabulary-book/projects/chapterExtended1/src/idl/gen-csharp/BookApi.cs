/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class BookApi {
  /// <summary>
  /// 単語帳サービス
  /// 
  /// </summary>
  public interface ISync {
    /// <summary>
    /// 翻訳
    /// </summary>
    /// <param name="word"></param>
    string search(string word);
    /// <summary>
    /// 単語を追加する
    /// </summary>
    /// <param name="word1"></param>
    /// <param name="word2"></param>
    string addword(string word1, string word2);
    /// <summary>
    /// 単語を削除する
    /// </summary>
    /// <param name="word"></param>
    string deleteWord(string word);
  }

  /// <summary>
  /// 単語帳サービス
  /// 
  /// </summary>
  public interface Iface : ISync {
    /// <summary>
    /// 翻訳
    /// </summary>
    /// <param name="word"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_search(AsyncCallback callback, object state, string word);
    string End_search(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 単語を追加する
    /// </summary>
    /// <param name="word1"></param>
    /// <param name="word2"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_addword(AsyncCallback callback, object state, string word1, string word2);
    string End_addword(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 単語を削除する
    /// </summary>
    /// <param name="word"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_deleteWord(AsyncCallback callback, object state, string word);
    string End_deleteWord(IAsyncResult asyncResult);
    #endif
  }

  /// <summary>
  /// 単語帳サービス
  /// 
  /// </summary>
  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_search(AsyncCallback callback, object state, string word)
    {
      return send_search(callback, state, word);
    }

    public string End_search(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_search();
    }

    #endif

    /// <summary>
    /// 翻訳
    /// </summary>
    /// <param name="word"></param>
    public string search(string word)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_search(null, null, word);
      return End_search(asyncResult);

      #else
      send_search(word);
      return recv_search();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_search(AsyncCallback callback, object state, string word)
    {
      oprot_.WriteMessageBegin(new TMessage("search", TMessageType.Call, seqid_));
      search_args args = new search_args();
      args.Word = word;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_search(string word)
    {
      oprot_.WriteMessageBegin(new TMessage("search", TMessageType.Call, seqid_));
      search_args args = new search_args();
      args.Word = word;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_search()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      search_result result = new search_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "search failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_addword(AsyncCallback callback, object state, string word1, string word2)
    {
      return send_addword(callback, state, word1, word2);
    }

    public string End_addword(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_addword();
    }

    #endif

    /// <summary>
    /// 単語を追加する
    /// </summary>
    /// <param name="word1"></param>
    /// <param name="word2"></param>
    public string addword(string word1, string word2)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_addword(null, null, word1, word2);
      return End_addword(asyncResult);

      #else
      send_addword(word1, word2);
      return recv_addword();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_addword(AsyncCallback callback, object state, string word1, string word2)
    {
      oprot_.WriteMessageBegin(new TMessage("addword", TMessageType.Call, seqid_));
      addword_args args = new addword_args();
      args.Word1 = word1;
      args.Word2 = word2;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_addword(string word1, string word2)
    {
      oprot_.WriteMessageBegin(new TMessage("addword", TMessageType.Call, seqid_));
      addword_args args = new addword_args();
      args.Word1 = word1;
      args.Word2 = word2;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_addword()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addword_result result = new addword_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addword failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_deleteWord(AsyncCallback callback, object state, string word)
    {
      return send_deleteWord(callback, state, word);
    }

    public string End_deleteWord(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deleteWord();
    }

    #endif

    /// <summary>
    /// 単語を削除する
    /// </summary>
    /// <param name="word"></param>
    public string deleteWord(string word)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_deleteWord(null, null, word);
      return End_deleteWord(asyncResult);

      #else
      send_deleteWord(word);
      return recv_deleteWord();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deleteWord(AsyncCallback callback, object state, string word)
    {
      oprot_.WriteMessageBegin(new TMessage("deleteWord", TMessageType.Call, seqid_));
      deleteWord_args args = new deleteWord_args();
      args.Word = word;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_deleteWord(string word)
    {
      oprot_.WriteMessageBegin(new TMessage("deleteWord", TMessageType.Call, seqid_));
      deleteWord_args args = new deleteWord_args();
      args.Word = word;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_deleteWord()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteWord_result result = new deleteWord_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteWord failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["search"] = search_Process;
      processMap_["addword"] = addword_Process;
      processMap_["deleteWord"] = deleteWord_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void search_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      search_args args = new search_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      search_result result = new search_result();
      try
      {
        result.Success = iface_.search(args.Word);
        oprot.WriteMessageBegin(new TMessage("search", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("search", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void addword_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addword_args args = new addword_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addword_result result = new addword_result();
      try
      {
        result.Success = iface_.addword(args.Word1, args.Word2);
        oprot.WriteMessageBegin(new TMessage("addword", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addword", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteWord_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteWord_args args = new deleteWord_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteWord_result result = new deleteWord_result();
      try
      {
        result.Success = iface_.deleteWord(args.Word);
        oprot.WriteMessageBegin(new TMessage("deleteWord", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteWord", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class search_args : TBase
  {
    private string _word;

    public string Word
    {
      get
      {
        return _word;
      }
      set
      {
        __isset.word = true;
        this._word = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool word;
    }

    public search_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Word = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("search_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Word != null && __isset.word) {
          field.Name = "word";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Word);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("search_args(");
      bool __first = true;
      if (Word != null && __isset.word) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Word: ");
        __sb.Append(Word);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class search_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public search_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("search_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("search_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addword_args : TBase
  {
    private string _word1;
    private string _word2;

    public string Word1
    {
      get
      {
        return _word1;
      }
      set
      {
        __isset.word1 = true;
        this._word1 = value;
      }
    }

    public string Word2
    {
      get
      {
        return _word2;
      }
      set
      {
        __isset.word2 = true;
        this._word2 = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool word1;
      public bool word2;
    }

    public addword_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Word1 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Word2 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addword_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Word1 != null && __isset.word1) {
          field.Name = "word1";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Word1);
          oprot.WriteFieldEnd();
        }
        if (Word2 != null && __isset.word2) {
          field.Name = "word2";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Word2);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addword_args(");
      bool __first = true;
      if (Word1 != null && __isset.word1) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Word1: ");
        __sb.Append(Word1);
      }
      if (Word2 != null && __isset.word2) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Word2: ");
        __sb.Append(Word2);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addword_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public addword_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addword_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addword_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteWord_args : TBase
  {
    private string _word;

    public string Word
    {
      get
      {
        return _word;
      }
      set
      {
        __isset.word = true;
        this._word = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool word;
    }

    public deleteWord_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Word = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteWord_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Word != null && __isset.word) {
          field.Name = "word";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Word);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteWord_args(");
      bool __first = true;
      if (Word != null && __isset.word) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Word: ");
        __sb.Append(Word);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteWord_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public deleteWord_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteWord_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteWord_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
